{"version":3,"sources":["features/tasks/TasksPage/input.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/getDate.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","routes.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/searchQueryParamsName.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/styledButton.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/ExampleTasksButton/styled.js","features/tasks/TasksPage/ExampleTasksButton/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Main/styled.js","common/Main/index.js","common/Wrapper/styled.js","common/Wrapper/index.js","common/Subheader/styled.js","common/Subheader/index.js","features/tasks/TasksPage/Search/index.js","features/tasks/queryParameters.js","features/tasks/TasksPage/index.js","features/description.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","common/Navigation/styled.js","common/Navigation/index.js","App.js","serviceWorker.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","features/tasks/rootSaga.js","store.js","index.js","theme.js"],"names":["StyledForm","styled","form","theme","colors","black","tan","darkTransparentBlack","breakpoints","maxWidth","SearchForm","Input","input","Button","button","darkEbony","white","lightTrnsparentBlack","mineShft","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDoneTasks","loading","reducers","addTask","payload","push","toggleHideDoneTasks","state","toggleTasksDone","action","index","findIndex","task","id","done","removeTasks","splice","allTasksDone","forEach","removeAllTasks","fetchExampleTasks","setTasks","loadingExampleTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksUndone","every","selectIsEveryTaskDone","selectAreTasksEmpty","length","selectLoadingExampleTasks","newDate","Date","toLocaleDateString","hour","minute","second","weekday","day","month","year","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentTrimmed","trim","addNewTaskDate","content","nanoid","date","current","focus","ref","value","type","onChange","target","required","List","ul","Item","li","hidden","css","chartreuse","doneTasks","crimson","Icon","i","Content","p","StyledLink","Link","toTask","TasksList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","key","onClick","className","to","ToggleButtons","section","lightTransparentBlack","mineShaft","twine","gallery","darkGrey","Buttons","areTasksEmpty","areTasksUndone","isEveryTasksDone","disabled","Wrapper","div","TasksButton","isLoading","StyledSection","Section","title","body","Title","h1","spicyMix","Header","StyledMain","main","dawnPink","darkTrnsparentBlack","Main","children","Wrap","SubheaderTitle","h2","Subeader","Search","searchQueryParamsName","useQueryParameters","replaceQueryParameters","history","useHistory","searchParams","undefined","delete","set","pathname","toString","useReplaceQueryParameters","placeholder","TasksPage","Subheader","Description","TaskPage","useParams","taskId","find","getTaskById","completeTaskDate","Author","Nav","nav","StyledNavLink","NavLink","attrs","activeClassName","Navigation","path","AuthorPage","Boolean","window","hostname","match","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","localStorageTasksHandler","tasksSaga","put","delay","call","exampleTasks","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.20948508.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledForm = styled.form`\n  margin: 30px 50px;\n  border: 3px solid ${({ theme }) => theme.colors.black};\n  border-radius: 10px;\n  padding: 20px;\n  text-align: center;\n  background-color: ${({ theme }) => theme.colors.tan};\n  box-shadow: 2px 2px 3px 3px\n    ${({ theme }) => theme.colors.darkTransparentBlack};\n  display: grid;\n  grid-template-columns: 3fr 1fr;\n  grid-gap: 20px;\n\n  @media (max-width: ${({ theme }) =>\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    grid-template-columns: 1fr;\n    margin: 10px 20px;\n  }\n`;\n\nexport const SearchForm = styled(StyledForm)`\n  grid-template-columns: 1fr;\n`;\n\nexport const Input = styled.input`\n  padding: 7px 0;\n  border: 2px solid ${({ theme }) => theme.colors.black};\n  border-radius: 7px;\n  width: 100%;\n`;\n\nexport const Button = styled.button`\n  font-family: \"Lato\", sans-serif;\n  text-transform: uppercase;\n  padding: 7px 0;\n  background-color: ${({ theme }) => theme.colors.darkEbony};\n  font-size: 15px;\n  border: 2px solid ${({ theme }) => theme.colors.black};\n  color: ${({ theme }) => theme.colors.white};\n  border-radius: 7px;\n  box-shadow: 2px 1px 2px 2px\n    ${({ theme }) => theme.colors.lightTrnsparentBlack};\n  text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShft};\n  transition: 0.3s;\n\n  &:hover {\n    filter: brightness(110%);\n    cursor: pointer;\n    transform: scaleX(1.1);\n  }\n\n  @media (max-width: ${({ theme }) =>\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    margin: 5px 10px;\n    grid-template-columns: none;\n    grid-auto-flow: row;\n    grid-template-columns: 1;\n    justify-content: center;\n  }\n`;\n","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = (tasks) =>\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\nexport const getTasksfromLocalStorage = () =>\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getTasksfromLocalStorage } from \"./tasksLocalStorage\";\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks: getTasksfromLocalStorage(),\n    hideDoneTasks: false,\n    loading: false,\n  },\n  reducers: {\n    addTask: ({ tasks }, { payload }) => {\n      tasks.push(payload);\n    },\n    toggleHideDoneTasks: (state) => {\n      state.hideDoneTasks = !state.hideDoneTasks;\n    },\n    toggleTasksDone: (state, action) => {\n      const index = state.tasks.findIndex((task) => task.id === action.payload);\n      state.tasks[index].done = !state.tasks[index].done;\n    },\n    removeTasks: ({ tasks }, action) => {\n      const index = tasks.findIndex((task) => task.id === action.payload);\n      tasks.splice(index, 1);\n    },\n    allTasksDone: (state) => {\n      state.tasks.forEach((task) => (task.done = true));\n    },\n    removeAllTasks: (state) => {\n      state.tasks = [];\n    },\n    fetchExampleTasks: () => {},\n    setTasks: (state, { payload: tasks }) => {\n      state.tasks = tasks;\n    },\n    loadingExampleTasks: (state, { payload }) => {\n      state.loading = payload;\n    },\n  },\n});\n\nexport const {\n  addTask,\n  toggleHideDoneTasks,\n  toggleTasksDone,\n  removeTasks,\n  allTasksDone,\n  removeAllTasks,\n  fetchExampleTasks,\n  setTasks,\n  loadingExampleTasks,\n} = tasksSlice.actions;\nexport const selectTasksState = (state) => state.tasks;\nexport const selectTasks = (state) => selectTasksState(state).tasks;\nexport const selectHideDone = (state) => selectTasksState(state).hideDoneTasks;\nexport const selectAreTasksUndone = (state) => {\n  selectTasks(state).every(({ done }) => !done);\n};\nexport const selectIsEveryTaskDone = (state) =>\n  selectTasks(state).every(({ done }) => done);\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\nexport const selectLoadingExampleTasks = (state) => state.tasks.loading;\nexport const getTaskById = (state, taskId) =>\n  selectTasks(state).find(({ id }) => id === taskId);\nexport const selectTasksByQuery = (state, query) => {\n  const tasks = selectTasks(state);\n\n  if (!query || query.trim() === \"\") {\n    return tasks;\n  }\n  return tasks.filter(({ content }) =>\n    content.toUpperCase().includes(query.trim().toUpperCase())\n  );\n};\n\nexport default tasksSlice.reducer;\n","export const newDate = () => {\n  return new Date().toLocaleDateString(\"en-GB\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\",\n  });\n};\n","import React, { useState, useRef } from \"react\";\nimport { StyledForm, Input, Button } from \"../input\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../../tasksSlice\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport { newDate } from \"../../getDate\";\n\nconst Form = () => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n  const inputRef = useRef(null);\n  const dispatch = useDispatch();\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    const contentTrimmed = newTaskContent.trim();\n    if (contentTrimmed === \"\") {\n      return;\n    }\n    const addNewTaskDate = newDate();\n    dispatch(\n      addTask({\n        content: contentTrimmed,\n        done: false,\n        id: nanoid(),\n        date: addNewTaskDate,\n      })\n    );\n\n    setNewTaskContent(\"\");\n    inputRef.current.focus();\n  };\n\n  return (\n    <StyledForm onSubmit={onFormSubmit}>\n      <label>\n        <Input\n          ref={inputRef}\n          value={newTaskContent}\n          name=\"task\"\n          type=\"text\"\n          onChange={(event) => setNewTaskContent(event.target.value)}\n          required\n        />\n      </label>\n      <Button>add task</Button>\n    </StyledForm>\n  );\n};\nexport default Form;\n","import styled, { css } from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const List = styled.ul`\n  list-style: none;\n  padding: 5px;\n\n  @media (max-width: ${({ theme }) =>\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    padding: 0px;\n  }\n`;\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  max-width: 80%;\n  margin: 0 auto;\n  justify-content: space-between;\n  align-items: center;\n  text-transform: uppercase;\n\n  ${({ hidden }) =>\n    hidden &&\n    css`\n      display: none;\n    `}\n\n  @media (max-width: ${({ theme }) =>\n    theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    margin: 0;\n    max-width: 100%;\n  }\n`;\nexport const Button = styled.button`\n  border: none;\n  width: 100%;\n  max-width: 30px;\n  height: 30px;\n  margin: 10px;\n  background-color: ${({ theme }) => theme.colors.chartreuse};\n  box-shadow: 0.5px 0.5px 3px 3px ${({ theme }) => theme.colors.black};\n\n  ${({ doneTasks }) =>\n    doneTasks &&\n    css`\n      background-color: ${({ theme }) => theme.colors.chartreuse};\n      transition: 0.3s;\n      transition: 0.3s;\n\n      &:hover {\n        filter: brightness (110%);\n      }\n      &:active {\n        filter: brightness(120%);\n      }\n    `};\n\n  ${({ removeTasks }) =>\n    removeTasks &&\n    css`\n      background-color: ${({ theme }) => theme.colors.crimson};\n\n      &:hover {\n        filter: brightness(110%);\n      }\n      &:active {\n        filter: brightness(120%);\n      }\n    `};\n`;\nexport const Icon = styled.i`\n  font-family: \"FontAwesome\";\n  font-style: normal;\n  font-size: 20px;\n`;\nexport const Content = styled.p`\n  padding: 5px 15px;\n\n  ${({ done }) =>\n    done &&\n    css`\n      text-decoration: line-through;\n    `};\n`;\n\nexport const StyledLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.black};\n  text-decoration: none;\n`;\n","export const toTasks = () => \"/tasks\";\nexport const toAuthor = () => \"/author\";\nexport const toTask = ({ id } = { id: \":id\" }) => `/task/${id}`;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { List, Item, Button, Icon, Content, StyledLink } from \"./styled\";\nimport {\n  toggleTasksDone,\n  removeTasks,\n  selectHideDone,\n  selectTasksByQuery,\n} from \"../../tasksSlice\";\nimport { useLocation } from \"react-router-dom\";\nimport searchQueryParamsName from \"../searchQueryParamsName\";\nimport { toTask } from \"../../../../routes\";\nconst TasksList = () => {\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get(searchQueryParamsName);\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\n  const hideDoneTasks = useSelector(selectHideDone);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map((task) => (\n        <Item key={task.id} hidden={task.done && hideDoneTasks}>\n          <Button\n            doneTasks\n            onClick={() => {\n              dispatch(toggleTasksDone(task.id));\n            }}\n          >\n            {task.done ? <Icon className=\"fas fa-check\"></Icon> : \"\"}\n          </Button>\n          <Content done={task.done}>\n            <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>{\" \"}\n          </Content>\n          <Button\n            removeTasks\n            onClick={() => {\n              dispatch(removeTasks(task.id));\n            }}\n          >\n            <Icon className=\"fas fa-trash\"></Icon>\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default TasksList;\n","export default \"search\";","import styled, { css } from \"styled-components\";\n\nexport const ToggleButtons = styled.section`\n  background-color: ${({ theme }) => theme.colors.tan};\n  border-radius: 7px;\n  border: 3px solid black;\n  box-shadow: 2px 1px 2px 2px\n    ${({ theme }) => theme.colors.lightTransparentBlack};\n  text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShaft};\n  display: flex;\n  justify-content: flex-end;\n  margin: 0 50px;\n  padding: 5px;\n\n  @media (max-width: ${({ theme }) =>\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    margin: 0px 10px;\n  }\n\n  ${({ hidden }) =>\n    hidden &&\n    css`\n      display: none;\n    `}\n`;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  border: 1px solid black;\n  border-radius: 7px;\n  background-color: ${({ theme }) => theme.colors.twine};\n  text-shadow: 2px 2px 2px ${({ theme }) => theme.colors.gallery};\n  text-transform: uppercase;\n  padding: 5px;\n  margin-right: 5px;\n\n  &:hover {\n    cursor: pointer;\n    color: ${({ theme }) => theme.colors.darkGrey};\n    background-color: ${({ theme }) => theme.colors.tan};\n  }\n  @media (max-width: ${({ theme }) =>\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    margin: 10px;\n    flex-direction: column;\n  }\n`;\n","import React from \"react\";\nimport { ToggleButtons } from \"./styled\";\nimport { Button } from \"../styledButton\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectTasksState,\n  toggleHideDoneTasks,\n  allTasksDone,\n  removeAllTasks,\n  selectAreTasksEmpty,\n  selectAreTasksUndone,\n  selectIsEveryTaskDone,\n} from \"../../tasksSlice\";\n\nconst Buttons = () => {\n  const { tasks, hideDoneTasks } = useSelector(selectTasksState);\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\n  const areTasksUndone = useSelector(selectAreTasksUndone);\n  const isEveryTasksDone = useSelector(selectIsEveryTaskDone);\n  const dispatch = useDispatch();\n  return (\n    <ToggleButtons hidden={areTasksEmpty}>\n      <Button\n        onClick={() => {\n          dispatch(toggleHideDoneTasks());\n        }}\n        disabled={areTasksUndone}\n      >\n        {hideDoneTasks ? \"Show\" : \"Hide\"} completed tasks\n      </Button>\n      <Button\n        onClick={() => {\n          dispatch(allTasksDone(tasks.done));\n        }}\n        disabled={isEveryTasksDone}\n      >\n        Mark all tasks as completed\n      </Button>\n      <Button\n        onClick={() => {\n          dispatch(removeAllTasks());\n        }}\n      >\n        Remove all tasks\n      </Button>\n    </ToggleButtons>\n  );\n};\n\nexport default Buttons;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n`;\nexport const Info = styled.p`\n  font-size: 20px;\n`;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Wrapper } from \"./styled\";\nimport { Button } from \"../styledButton\";\nimport { fetchExampleTasks, selectLoadingExampleTasks } from \"../../tasksSlice\";\n\nconst TasksButton = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoadingExampleTasks);\n  return (\n    <Wrapper>\n      <Button\n        onClick={() => {\n          dispatch(fetchExampleTasks());\n        }}\n        disabled={isLoading}\n      >\n        {isLoading ? \"Loading...\" : \"Add example tasks\"}\n      </Button>\n    </Wrapper>\n  );\n};\nexport default TasksButton;\n","import styled from \"styled-components\";\n\nexport const StyledSection = styled.section`\n  background-color: ${({ theme }) => theme.colors.tan};\n  border-radius: 7px;\n  border: 3px solid ${({ theme }) => theme.colors.black};\n  box-shadow: 2px 1px 2px 2px\n    ${({ theme }) => theme.colors.lightTransparentBlack};\n  text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShaft};\n  margin: 20px;\n\n  @media (max-width: ${({ theme }) =>\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\n    margin: 10px;\n  }\n`;\n","import React from \"react\";\nimport { StyledSection } from \"./styled\";\n\nconst Section = ({ title, body }) => (\n  <StyledSection>\n    {title}\n    {body}\n  </StyledSection>\n);\n\nexport default Section;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n  padding: 10px;\n  font-family: \"Galada\", cursive;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 50px;\n  border: 5px solid ${({ theme }) => theme.colors.black};\n  color: ${({ theme }) => theme.colors.white};\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.colors.spicyMix};\n  box-shadow: 5px 5px 2px 2px\n    ${({ theme }) => theme.colors.lightTransparentBlack};\n  text-shadow: 4px 4px 2px ${({ theme }) => theme.colors.mineShaft};\n  letter-spacing: 2pxF;\n`;\n","import React from \"react\";\nimport { Title } from \"./styled\";\n\nconst Header = ({ title }) => (\n  <header>\n    <Title>{title}</Title>\n  </header>\n);\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport const StyledMain = styled.main`\n  background-color: ${({ theme }) => theme.colors.dawnPink};\n  padding-top: 20px;\n  border: 4px solid ${({ theme }) => theme.colors.black};\n  border-radius: 10px;\n  box-shadow: 5px 5px 6px 6px ${({ theme }) => theme.colors.darkTrnsparentBlack};\n  margin: 15px;\n`;\n","import React from \"react\";\nimport { StyledMain } from \"./styled\";\n\nconst Main = ({ children }) => <StyledMain>{children}</StyledMain>;\nexport default Main;\n","import styled from \"styled-components\";\n\nexport const Wrap = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n","import React from \"react\";\nimport { Wrap } from \"./styled\";\n\nconst Wrapper = ({ children }) => <Wrap>{children}</Wrap>;\nexport default Wrapper;\n","import styled from \"styled-components\";\n\nexport const SubheaderTitle = styled.h2`\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 30px;\n  text-shadow: 2px 2px 2px ${({ theme }) => theme.colors.gallery};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.black};\n  padding: 20px;\n  margin: 0 20px;\n`;\n","import React from \"react\";\nimport { SubheaderTitle } from \"./styled\";\n\nconst Subeader = ({ title }) => <SubheaderTitle>{title}</SubheaderTitle>;\n\nexport default Subeader;\n","import React from \"react\";\nimport searchQueryParamsName from \"../searchQueryParamsName\";\nimport { SearchForm, Input } from \"../input\";\nimport {\n  useQueryParameters,\n  useReplaceQueryParameters,\n} from \"../../queryParameters\";\n\nconst Search = () => {\n  const query = useQueryParameters(searchQueryParamsName);\n  const replaceQueryParameters = useReplaceQueryParameters();\n\n  const onInputChange = ({ target }) => {\n    replaceQueryParameters({\n      key: searchQueryParamsName,\n      value: target.value.trim() !== \"\" ? target.value : undefined,\n    });\n  };\n\n  return (\n    <SearchForm>\n      <Input\n        placeholder=\"Filter tasks\"\n        value={query || \"\"}\n        onChange={onInputChange}\n      />\n    </SearchForm>\n  );\n};\nexport default Search;\n","import { useLocation, useHistory } from \"react-router-dom\";\n\nexport const useQueryParameters = (searchQueryParamsName) => {\n  const location = useLocation();\n  return new URLSearchParams(location.search).get(searchQueryParamsName);\n};\n\nexport const useReplaceQueryParameters = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n\n  return ({ value, key }) => {\n    if (value === undefined) {\n      searchParams.delete(key);\n    } else {\n      searchParams.set(key, value);\n    }\n\n    history.push(`${location.pathname}?${searchParams.toString()}`);\n  };\n};\n","import React from \"react\";\nimport Form from \"./Form\";\nimport TasksList from \"./TasksList\";\nimport Buttons from \"./Buttons\";\nimport TasksButton from \"./ExampleTasksButton\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Main from \"../../../common/Main\";\nimport Wrapper from \"../../../common/Wrapper\";\nimport Subheader from \"../../../common/Subheader\";\nimport Search from \"./Search\";\n\nfunction TasksPage() {\n  return (\n    <Wrapper>\n      <Header title=\"To do list\" />\n      <Main>\n        <TasksButton />\n        <Form />\n        <Search />\n        <Buttons />\n        <Section title={<Subheader title=\"task list\" />} body={<TasksList />} />\n      </Main>\n    </Wrapper>\n  );\n};\n\nexport default TasksPage;\n","import styled from \"styled-components\";\n\nexport const Description = styled.p`\n  text-shadow: none;\n  padding: 0 10px;\n  font-weight: normal;\n`;\n","import React from \"react\";\nimport Section from \"..//../../common/Section\";\nimport Main from \"../../../common/Main\";\nimport Wrapper from \"../../../common/Wrapper\";\nimport Header from \"../../../common/Header\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getTaskById } from \"../tasksSlice\";\nimport Subheader from \"../../../common/Subheader\";\nimport { Description } from \"../../description\";\nimport { newDate } from \"../getDate\";\n\nfunction TaskPage() {\n  const { id } = useParams();\n  const task = useSelector((state) => getTaskById(state, id));\n  const completeTaskDate = newDate();\n  return (\n    <Wrapper>\n      <Header title=\"task details\" />\n      <Main>\n        <Section\n          title={\n            <Subheader title={task ? task.content : \"Task not found 🙁\"} />\n          }\n          body={\n            <Description>\n              <strong>Completed: </strong>\n              {task.done ? \"Yes 👍\" : \"No 😟\"} <br></br>\n              <strong>Task added on: </strong>\n              {task ? task.date : \"nie ma zadania\"} <br></br>\n              <strong>Task completed on: </strong>\n              {task.done\n                ? completeTaskDate\n                : \"This task has not been completed yet\"}{\" \"}\n              <br></br>\n            </Description>\n          }\n        />\n      </Main>\n    </Wrapper>\n  );\n}\n\nexport default TaskPage;\n","import React from \"react\";\nimport Section from \"../../common/Section\";\nimport Header from \"../../common/Header\";\nimport Main from \"../../common/Main\";\nimport Wrapper from \"../../common/Wrapper\";\nimport Subheader from \"../../common/Subheader\";\nimport { Description } from \"../description\";\n\nfunction Author() {\n  return (\n    <Wrapper>\n      <Header title=\"About author\" />\n      <Main>\n        <Section\n          title={<Subheader title=\"Magdalena Checinski\" />}\n          body={\n            <Description>\n              <>\n                Hi! 😃 <br></br>I am a junior frontend developer. I have been\n                learning programming since 2020. I started with the{\" \"}\n                <strong>\"Become a Frontend Developer\"</strong> course at Youcode\n                Academy. This To Do List is one of the applications made for\n                this course.\n              </>\n            </Description>\n          }\n        />\n      </Main>\n    </Wrapper>\n  );\n}\nexport default Author;\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nconst activeClassName = \"active\";\n\nexport const Nav = styled.nav`\n  margin: 5px;\n  border: 3px solid ${({ theme }) => theme.colors.black};\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.colors.spicyMix};\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  margin: 0 auto;\n  list-style: none;\n  text-shadow: 2px 2px 1px ${({ theme }) => theme.colors.mineShaft};\n  color: ${({ theme }) => theme.colors.white};\n  letter-spacing: 2px;\n  text-transform: uppercase;\n`;\n\nexport const Item = styled.li`\n  font-size: 18px;\n  margin: 10px;\n`;\n\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\n  activeClassName,\n}))`\n  text-decoration: none;\n  color: ${({ theme }) => theme.colors.white};\n  &.${activeClassName} {\n    background-color: ${({ theme }) => theme.colors.tan};\n    border-radius: 7px;\n    border: 2px solid ${({ theme }) => theme.colors.black};\n    box-shadow: 2px 1px 2px 2px\n      ${({ theme }) => theme.colors.lightTransparentBlack};\n    text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShaft};\n    padding: 2px;\n  }\n`;\n","import React from \"react\";\nimport { Nav, StyledNavLink, Item, List } from \"./styled\";\nimport { toTasks, toAuthor } from \"../../routes\";\nconst Navigation = () => (\n  <Nav>\n    <List>\n      <Item>\n        <StyledNavLink activeClassName=\"active\" to={toTasks()}>\n          Tasks List\n        </StyledNavLink>\n      </Item>\n      <Item>\n        <StyledNavLink activeClassName=\"active\" to={toAuthor()}>\n          Author\n        </StyledNavLink>\n      </Item>\n    </List>\n  </Nav>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport TasksPage from \"./features/tasks/TasksPage\";\nimport TaskPage from \"./features/tasks/TaskPage\";\nimport AuthorPage from \"./features/author/AuthorPage\";\nimport Navigation from \"./common/Navigation\";\nimport { toAuthor, toTasks, toTask } from \"./routes\";\n\nexport default () => (\n  <HashRouter>\n    <Navigation />\n    <Switch>\n      <Route path={toTask()}>\n        <TaskPage />\n      </Route>\n      <Route path={toTasks()}>\n        <TasksPage />\n      </Route>\n      <Route path={toAuthor()}>\n        <AuthorPage />\n      </Route>\n      <Route path=\"/\">\n        <Redirect to={toTasks()}></Redirect>\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml {\n    box-sizing: border-box;\n    font-family: \"Lato\", sans-serif;\n}\n\n*, ::after, ::before {\n  box-sizing: inherit;\n}\n\nbody {\n  background-image: url(https://cdn.pixabay.com/photo/2016/03/15/02/42/floor-1256804_960_720.jpg);\n  background-position: center;\n  background-size: cover;\n  background-attachment: fixed;\n}\n`;\n","export const getExampleTasks = async () => {\n  const response = await fetch(\"/todo-list-react/exampleTasks.json\");\n  if (!response.ok) {\n    new Error(response.statusText);\n  }\n\n  return await response.json();\n};\n","import {\n  takeLatest,\n  delay,\n  call,\n  put,\n  select,\n  takeEvery,\n} from \"redux-saga/effects\";\nimport {\n  fetchExampleTasks,\n  setTasks,\n  selectTasks,\n  loadingExampleTasks,\n} from \"./tasksSlice\";\nimport { getExampleTasks } from \"./getExampleTasks\";\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\n\nexport function* fetchExampleTasksHandler() {\n  try {\n    yield put(loadingExampleTasks(true));\n    yield delay(1000);\n    const exampleTasks = yield call(getExampleTasks);\n    yield put(setTasks(exampleTasks));\n    yield put(loadingExampleTasks(false));\n  } catch (error) {\n    yield call(alert, \"Oops, something's wrong, sorry \");\n    yield put(loadingExampleTasks(false));\n  }\n}\n\nfunction* localStorageTasksHandler() {\n  const tasks = yield select(selectTasks);\n  yield call(saveTasksInLocalStorage, tasks);\n}\n\nexport function* tasksSaga() {\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n  yield takeEvery(\"*\", localStorageTasksHandler);\n}\n","import { all } from \"redux-saga/effects\";\nimport { tasksSaga } from \"./tasksSaga\";\n\nexport default function* rootSaga() {\n  yield all([tasksSaga()]);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport tasksReducer from \"./features/tasks/tasksSlice\";\nimport rootSaga from \"./features/tasks/rootSaga\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n  },\n  middleware: [sagaMiddleware],\n});\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./theme\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const theme = {\n  colors: {\n    black: \"#000000\",\n    darkTransparentBlack: \"#000000b3\",\n    lightTransparentBlack: \"#00000066\",\n    darkGrey: \"#333333\",\n    white: \"#ffffff\",\n    mineShaft: \"#222222\",\n    twine: \"#c39f6f\",\n    gallery: \"#eeeeee\",\n    tan: \"#c7a67a\",\n    darkEbony: \"#341f04\",\n    spicyMix: \"#8b6e46\",\n    dawnPink: \"#f0e9e0\",\n    chartreuse: \"#7fff00\",\n    crimson: \"#dc143c\",\n  },\n\n  breakpoints: {\n    maxWidth: 414,\n  },\n};\n"],"sourceRoot":""}