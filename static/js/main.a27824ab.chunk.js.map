{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/styled.js","Header/index.js","Main/styled.js","Main/index.js","Wrapper/styled.js","Wrapper/index.js","Subheader/styled.js","Subheader/index.js","App.js","useTasks.js","serviceWorker.js","index.js"],"names":["StyledForm","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","contentTrimmed","trim","ref","value","name","type","onChange","target","required","onClick","current","focus","List","ul","Item","li","hidden","css","doneTasks","removeTasks","Icon","i","Content","p","done","Tasks","tasks","hideDoneTasks","removeTask","toggleDoneTask","map","task","key","id","className","content","ToggleButtons","section","Buttons","toggleHideDoneTasks","allTasksDone","length","disabled","every","StyledSection","Section","title","body","Title","h1","Header","StyledMain","main","Main","children","Wrap","div","Wrapper","SubheaderTitle","h2","Subeader","App","setHideDoneTasks","tasksSavedInLocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","filter","useTasks","Subheader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a27824ab.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  margin: 30px 50px;\r\n  border: 3px solid black;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  background-color: hsl(34, 41%, 68%);\r\n  box-shadow: 2px 2px 3px 3px rgba(0, 0, 0, 0.7);\r\n  display: grid;\r\n  grid-template-columns: 3fr 1fr;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: 414px) and (orientation: portrait) {\r\n    grid-template-columns: 1fr;\r\n    margin: 10px 20px;\r\n  }\r\n`;\r\nexport const Input = styled.input`\r\n  padding: 7px 0;\r\n  border: 2px solid black;\r\n  border-radius: 7px;\r\n  width: 100%;\r\n`;\r\nexport const Button = styled.button`\r\n  font-family: \"Lato\", sans-serif;\r\n  text-transform: uppercase;\r\n  padding: 7px 0;\r\n  background-color: hsl(34, 84%, 15%);\r\n  font-size: 15px;\r\n  border: 2px solid black;\r\n  color: white;\r\n  border-radius: 7px;\r\n  box-shadow: 2px 1px 2px 2px rgba(0, 0, 0, 0.4);\r\n  text-shadow: 1px 1px 2px #222;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    background-color: hsl(34, 84%, 11%);\r\n    cursor: pointer;\r\n    transform: scaleX(1.1);\r\n  }\r\n\r\n  @media (max-width: 414px) and (orientation: portrait) {\r\n    margin: 5px 10px;\r\n    grid-template-columns: none;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: 1;\r\n    justify-content: center;\r\n  }\r\n`;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const contentTrimmed = newTaskContent.trim();\r\n    if (contentTrimmed === \"\") {\r\n      return;\r\n    }\r\n    addNewTask(contentTrimmed);\r\n    setNewTaskContent(\"\");\r\n  };\r\n  const inputRef = useRef(null);\r\n\r\n  const focusInput = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <label>\r\n        <Input\r\n          ref={inputRef}\r\n          value={newTaskContent}\r\n          name=\"task\"\r\n          type=\"text\"\r\n          onChange={(event) => setNewTaskContent(event.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <Button onClick={focusInput}>add task</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  padding: 5px;\r\n\r\n  @media (max-width: 360px) and (orientation: portrait) {\r\n    padding: 0px;\r\n  }\r\n`;\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  max-width: 80%;\r\n  margin: 0 auto;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  text-transform: uppercase;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n\r\n  @media (max-width: 360px) and (orientation: portrait) {\r\n    margin: 0;\r\n    max-width: 100%;\r\n  }\r\n`;\r\nexport const Button = styled.button`\r\n  border: none;\r\n  width: 100%;\r\n  max-width: 30px;\r\n  height: 30px;\r\n  margin: 10px;\r\n  background-color: chartreuse;\r\n  box-shadow: 0.5px 0.5px 3px 3px black;\r\n\r\n  ${({ doneTasks }) =>\r\n    doneTasks &&\r\n    css`\r\n      background-color: chartreuse;\r\n      transition: 0.3s;\r\n      transition: 0.3s;\r\n\r\n      &:hover {\r\n        background-color: hsl(90, 100%, 40%);\r\n      }\r\n      &:active {\r\n        background-color: hsl(90, 100%, 30%);\r\n      }\r\n    `};\r\n\r\n  ${({ removeTasks }) =>\r\n    removeTasks &&\r\n    css`\r\n      background-color: crimson;\r\n\r\n      &:hover {\r\n        background-color: hsl(348, 83%, 37%);\r\n      }\r\n      &:active {\r\n        background-color: hsl(348, 83%, 27%);\r\n      }\r\n    `};\r\n`;\r\nexport const Icon = styled.i`\r\n  font-family: \"FontAwesome\";\r\n  font-style: normal;\r\n  font-size: 20px;\r\n`;\r\nexport const Content = styled.p`\r\n  padding: 5px 15px;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `};\r\n`;\r\n","import React from \"react\";\r\nimport { List, Item, Button, Icon, Content } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks, removeTask, toggleDoneTask }) => (\r\n  <List>\r\n    {tasks.map((task) => (\r\n      <Item key={task.id} hidden={task.done && hideDoneTasks}>\r\n        <Button\r\n          doneTasks\r\n          onClick={() => {\r\n            toggleDoneTask(task.id);\r\n          }}\r\n        >\r\n          {task.done ? <Icon className=\"fas fa-check\"></Icon> : \"\"}\r\n        </Button>\r\n        <Content done={task.done}>{task.content}</Content>\r\n        <Button\r\n          removeTasks\r\n          onClick={() => {\r\n            removeTask(task.id);\r\n          }}\r\n        >\r\n          <Icon className=\"fas fa-trash\"></Icon>\r\n        </Button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default Tasks;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ToggleButtons = styled.section`\r\n  background-color: hsl(34, 41%, 68%);\r\n  border-radius: 7px;\r\n  border: 3px solid black;\r\n  box-shadow: 2px 1px 2px 2px rgba(0, 0, 0, 0.4);\r\n  text-shadow: 1px 1px 2px #222;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin: 0 50px;\r\n  padding: 5px;\r\n\r\n  @media (max-width: 414px) and (orientation: portrait) {\r\n    margin: 0px 10px;\r\n  }\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: 1px solid black;\r\n  border-radius: 7px;\r\n  background-color: hsl(34, 41%, 60%);\r\n  text-shadow: 2px 2px 2px #eee;\r\n  text-transform: uppercase;\r\n  padding: 5px;\r\n  margin-right: 5px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: #333;\r\n    background-color: hsl(34, 41%, 63%);\r\n  }\r\n  @media (max-width: 414) and (orientation: portrait) {\r\n    margin: 10px;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ToggleButtons, Button } from \"./styled\";\r\n\r\nconst Buttons = ({\r\n  tasks,\r\n  hideDoneTasks,\r\n  toggleHideDoneTasks,\r\n  allTasksDone,\r\n}) => (\r\n  <ToggleButtons hidden={!tasks.length}>\r\n    <Button\r\n      onClick={toggleHideDoneTasks}\r\n      disabled={tasks.every(({ done }) => !done)}\r\n    >\r\n      {hideDoneTasks ? \"Show\" : \"Hide\"} completed tasks\r\n    </Button>\r\n    <Button onClick={allTasksDone} disabled={tasks.every(({ done }) => done)}>\r\n      Mark all tasks as completed\r\n    </Button>\r\n  </ToggleButtons>\r\n);\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: hsl(34, 41%, 68%);\r\n  border-radius: 7px;\r\n  border: 3px solid black;\r\n  box-shadow: 2px 1px 2px 2px rgba(0, 0, 0, 0.4);\r\n  text-shadow: 1px 1px 2px #222;\r\n  margin: 20px;\r\n\r\n  @media (max-width: 414px) and (orientation: portrait) {\r\n    margin: 10px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledSection } from \"./styled\";\r\n\r\nconst Section = ({ title, body }) => (\r\n  <StyledSection>\r\n    {title}\r\n    {body}\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  padding: 10px;\r\n  font-family: \"Galada\", cursive;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-size: 50px;\r\n  border: 5px solid black;\r\n  color: white;\r\n  border-radius: 10px;\r\n  background-color: hsl(35, 33%, 41%);\r\n  box-shadow: 5px 5px 2px 2px rgba(0, 0, 0, 0.4);\r\n  text-shadow: 4px 4px 2px #222;\r\n  letter-spacing: 2px;\r\n`;\r\n","import React from \"react\";\r\nimport { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n  background-color: hsl(35, 33%, 91%);\r\n  padding-top: 20px;\r\n  border: 4px solid black;\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 6px 6px rgba(0, 0, 0, 0.7);\r\n  margin: 15px;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledMain } from \"./styled\";\r\n\r\nconst Main = ({ children }) => <StyledMain>{children}</StyledMain>;\r\nexport default Main;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrap = styled.div`\r\n  font-family: \"Lato\", sans-serif;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrap } from \"./styled\";\r\n\r\nconst Wrapper = ({ children }) => <Wrap>{children}</Wrap>;\r\nexport default Wrapper;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SubheaderTitle = styled.h2`\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n  text-shadow: 2px 2px 2px #eee;\r\n  border-bottom: 2px solid black;\r\n  padding: 20px;\r\n  margin: 0 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { SubheaderTitle } from \"./styled\";\r\n\r\nconst Subeader = ({ title }) => <SubheaderTitle>{title}</SubheaderTitle>;\r\n\r\nexport default Subeader;\r\n","import React, { useState } from \"react\";\r\nimport { useTasks } from \"./useTasks\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport Subheader from \"./Subheader\";\r\n\r\nfunction App() {\r\n  const [hideDoneTasks, setHideDoneTasks] = useState(false);\r\n\r\n  const toggleHideDoneTask = () => {\r\n    setHideDoneTasks((hideDoneTasks) => !hideDoneTasks);\r\n  };\r\n\r\n  const {\r\n    tasks,\r\n    removeTask,\r\n    toggleDoneTask,\r\n    allTasksDone,\r\n    addNewTask,\r\n  } = useTasks();\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Header title=\"To do list\" />\r\n      <Main>\r\n        <Form tasks={tasks} addNewTask={addNewTask} />\r\n        <Buttons\r\n          tasks={tasks}\r\n          hideDoneTasks={hideDoneTasks}\r\n          toggleHideDoneTasks={toggleHideDoneTask}\r\n          allTasksDone={allTasksDone}\r\n        />\r\n        <Section\r\n          title={<Subheader title=\"task list\" />}\r\n          body={\r\n            <Tasks\r\n              removeTask={removeTask}\r\n              toggleDoneTask={toggleDoneTask}\r\n              tasks={tasks}\r\n              hideDoneTasks={hideDoneTasks}\r\n            />\r\n          }\r\n        />\r\n      </Main>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect, } from \"react\";\r\n\r\nexport const useTasks = () => {\r\n  \r\n    const getTasks = ()=> {\r\n      const tasksSavedInLocalStorage = localStorage.getItem(\"tasks\");\r\n      return tasksSavedInLocalStorage ? \r\n      JSON.parse(tasksSavedInLocalStorage) : [] ;\r\n    };\r\n  \r\n    const [tasks, setTasks] = useState(getTasks);\r\n  \r\n    useEffect(()=>{ \r\n      localStorage.setItem (\"tasks\", JSON.stringify(tasks))\r\n    },[tasks]);\r\n  \r\n    const removeTask = (id) => {setTasks(tasks =>\r\n       tasks.filter(task => task.id !== id));\r\n    };\r\n  \r\n    const toggleDoneTask = (id) => {\r\n      setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id){\r\n        return{...task, done: !task.done}\r\n      }\r\n      return task;\r\n    }));\r\n  };\r\n  \r\n  const allTasksDone = () => {\r\n    setTasks(\r\n      tasks => tasks.map((task)=>({...task, done:true}))\r\n    );\r\n  };\r\n  \r\n  const addNewTask = (newTaskContent, tasks)=>{\r\n    setTasks(tasks => [...tasks,\r\n    {content: newTaskContent,\r\n      done: false,\r\n      id: tasks.length? tasks[tasks.length-1].id + 1 : 1\r\n    },\r\n  ])\r\n  };\r\n  \r\nreturn {\r\n   tasks,\r\n   removeTask,\r\n   toggleDoneTask,\r\n   allTasksDone,\r\n   addNewTask} ; \r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}