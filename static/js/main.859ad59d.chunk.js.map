{"version":3,"sources":["features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/styledButton.js","features/tasks/Buttons/index.js","features/tasks/TasksButton/styled.js","features/tasks/TasksButton/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Main/styled.js","common/Main/index.js","common/Wrapper/styled.js","common/Wrapper/index.js","common/Subheader/styled.js","common/Subheader/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","store.js","index.js","theme.js"],"names":["StyledForm","styled","form","theme","colors","black","tan","darkTransparentBlack","breakpoints","maxWidth","Input","input","Button","button","darkEbony","white","lightTrnsparentBlack","mineShft","tasksSlice","createSlice","name","initialState","tasks","hideDoneTasks","loading","reducers","addTask","payload","push","toggleHideDoneTasks","state","toggleTasksDone","action","index","findIndex","task","id","done","removeTasks","splice","allTasksDone","forEach","fetchExampleTasks","setTasks","loadingExampleTasks","actions","selectTasks","selectLoadingExampleTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","contentTrimmed","trim","content","nanoid","current","focus","ref","value","type","onChange","target","required","List","ul","Item","li","hidden","css","chartreuse","doneTasks","crimson","Icon","i","Content","p","TasksList","useSelector","map","key","onClick","className","ToggleButtons","section","lightTransparentBlack","mineShaft","twine","gallery","darkGrey","Buttons","length","disabled","every","Wrapper","div","TasksButton","isLoading","StyledSection","Section","title","body","Title","h1","spicyMix","Header","StyledMain","main","dawnPink","darkTrnsparentBlack","Main","children","Wrap","SubheaderTitle","h2","Subeader","Tasks","Subheader","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","showFetchExampleTasks","put","delay","call","exampleTasks","console","error","alert","takeLatest","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.859ad59d.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  margin: 30px 50px;\r\n  border: 3px solid ${({ theme }) => theme.colors.black};\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.colors.tan};\r\n  box-shadow: 2px 2px 3px 3px\r\n    ${({ theme }) => theme.colors.darkTransparentBlack};\r\n  display: grid;\r\n  grid-template-columns: 3fr 1fr;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) =>\r\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    grid-template-columns: 1fr;\r\n    margin: 10px 20px;\r\n  }\r\n`;\r\nexport const Input = styled.input`\r\n  padding: 7px 0;\r\n  border: 2px solid ${({ theme }) => theme.colors.black};\r\n  border-radius: 7px;\r\n  width: 100%;\r\n`;\r\nexport const Button = styled.button`\r\n  font-family: \"Lato\", sans-serif;\r\n  text-transform: uppercase;\r\n  padding: 7px 0;\r\n  background-color: ${({ theme }) => theme.colors.darkEbony};\r\n  font-size: 15px;\r\n  border: 2px solid ${({ theme }) => theme.colors.black};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border-radius: 7px;\r\n  box-shadow: 2px 1px 2px 2px\r\n    ${({ theme }) => theme.colors.lightTrnsparentBlack};\r\n  text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShft};\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    cursor: pointer;\r\n    transform: scaleX(1.1);\r\n  }\r\n\r\n  @media (max-width: ${({ theme }) =>\r\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    margin: 5px 10px;\r\n    grid-template-columns: none;\r\n    grid-auto-flow: row;\r\n    grid-template-columns: 1;\r\n    justify-content: center;\r\n  }\r\n`;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDoneTasks: false,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toggleHideDoneTasks: (state) => {\r\n      state.hideDoneTasks = !state.hideDoneTasks;\r\n    },\r\n    toggleTasksDone: (state, action) => {\r\n      const index = state.tasks.findIndex((task) => task.id === action.payload);\r\n      state.tasks[index].done = !state.tasks[index].done;\r\n    },\r\n    removeTasks: ({ tasks }, action) => {\r\n      const index = tasks.findIndex((task) => task.id === action.payload);\r\n      tasks.splice(index, 1);\r\n    },\r\n    allTasksDone: (state) => {\r\n      state.tasks.forEach((task) => (task.done = true));\r\n    },\r\n    fetchExampleTasks: () => {},\r\n    setTasks: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n    },\r\n    loadingExampleTasks: (state, { payload }) => {\r\n      state.loading = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDoneTasks,\r\n  toggleTasksDone,\r\n  removeTasks,\r\n  allTasksDone,\r\n  fetchExampleTasks,\r\n  setTasks,\r\n  loadingExampleTasks,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks;\r\nexport const selectLoadingExampleTasks = (state) => state.tasks.loading;\r\nexport default tasksSlice.reducer;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const contentTrimmed = newTaskContent.trim();\r\n    if (contentTrimmed === \"\") {\r\n      return;\r\n    }\r\n    dispatch(\r\n      addTask({\r\n        content: contentTrimmed,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <label>\r\n        <Input\r\n          ref={inputRef}\r\n          value={newTaskContent}\r\n          name=\"task\"\r\n          type=\"text\"\r\n          onChange={(event) => setNewTaskContent(event.target.value)}\r\n          required\r\n        />\r\n      </label>\r\n      <Button>add task</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  padding: 5px;\r\n\r\n  @media (max-width: ${({ theme }) =>\r\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    padding: 0px;\r\n  }\r\n`;\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  max-width: 80%;\r\n  margin: 0 auto;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  text-transform: uppercase;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n\r\n  @media (max-width: ${({ theme }) =>\r\n    theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    margin: 0;\r\n    max-width: 100%;\r\n  }\r\n`;\r\nexport const Button = styled.button`\r\n  border: none;\r\n  width: 100%;\r\n  max-width: 30px;\r\n  height: 30px;\r\n  margin: 10px;\r\n  background-color: ${({ theme }) => theme.colors.chartreuse};\r\n  box-shadow: 0.5px 0.5px 3px 3px ${({ theme }) => theme.colors.black};\r\n\r\n  ${({ doneTasks }) =>\r\n    doneTasks &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.colors.chartreuse};\r\n      transition: 0.3s;\r\n      transition: 0.3s;\r\n\r\n      &:hover {\r\n        filter: brightness (110%);\r\n      }\r\n      &:active {\r\n        filter: brightness(120%);\r\n      }\r\n    `};\r\n\r\n  ${({ removeTasks }) =>\r\n    removeTasks &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.colors.crimson};\r\n\r\n      &:hover {\r\n        filter: brightness(110%);\r\n      }\r\n      &:active {\r\n        filter: brightness(120%);\r\n      }\r\n    `};\r\n`;\r\nexport const Icon = styled.i`\r\n  font-family: \"FontAwesome\";\r\n  font-style: normal;\r\n  font-size: 20px;\r\n`;\r\nexport const Content = styled.p`\r\n  padding: 5px 15px;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `};\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Button, Icon, Content } from \"./styled\";\r\nimport { selectTasks, toggleTasksDone, removeTasks } from \"../tasksSlice\";\r\n\r\nconst TasksList = () => {\r\n  const { tasks, hideDoneTasks } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDoneTasks}>\r\n          <Button\r\n            doneTasks\r\n            onClick={() => {\r\n              dispatch(toggleTasksDone(task.id));\r\n            }}\r\n          >\r\n            {task.done ? <Icon className=\"fas fa-check\"></Icon> : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>{task.content}</Content>\r\n          <Button\r\n            removeTasks\r\n            onClick={() => {\r\n              dispatch(removeTasks(task.id));\r\n            }}\r\n          >\r\n            <Icon className=\"fas fa-trash\"></Icon>\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const ToggleButtons = styled.section`\r\n  background-color: ${({ theme }) => theme.colors.tan};\r\n  border-radius: 7px;\r\n  border: 3px solid black;\r\n  box-shadow: 2px 1px 2px 2px\r\n    ${({ theme }) => theme.colors.lightTransparentBlack};\r\n  text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShaft};\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin: 0 50px;\r\n  padding: 5px;\r\n\r\n  @media (max-width: ${({ theme }) =>\r\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    margin: 0px 10px;\r\n  }\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  border: 1px solid black;\r\n  border-radius: 7px;\r\n  background-color: ${({ theme }) => theme.colors.twine};\r\n  text-shadow: 2px 2px 2px ${({ theme }) => theme.colors.gallery};\r\n  text-transform: uppercase;\r\n  padding: 5px;\r\n  margin-right: 5px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: ${({ theme }) => theme.colors.darkGrey};\r\n    background-color: ${({ theme }) => theme.colors.tan};\r\n  }\r\n  @media (max-width: ${({ theme }) =>\r\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    margin: 10px;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ToggleButtons } from \"./styled\";\r\nimport { Button } from \"../styledButton\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDoneTasks, allTasksDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDoneTasks } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ToggleButtons hidden={!tasks.length}>\r\n      <Button\r\n        onClick={() => {\r\n          dispatch(toggleHideDoneTasks());\r\n        }}\r\n        disabled={tasks.every(({ done }) => !done)}\r\n      >\r\n        {hideDoneTasks ? \"Show\" : \"Hide\"} completed tasks\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          dispatch(allTasksDone(tasks.done));\r\n        }}\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        Mark all tasks as completed\r\n      </Button>\r\n    </ToggleButtons>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n`;\r\nexport const Info = styled.p`\r\n  font-size: 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Wrapper } from \"./styled\";\r\nimport { Button } from \"../styledButton\";\r\nimport { fetchExampleTasks, selectLoadingExampleTasks } from \"../tasksSlice\";\r\n\r\nconst TasksButton = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(selectLoadingExampleTasks);\r\n  return (\r\n    <Wrapper>\r\n      <Button\r\n        onClick={() => {\r\n          dispatch(fetchExampleTasks());\r\n        }}\r\n      >\r\n        {isLoading ? \"Loading...\" : \"Add example tasks\"}\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default TasksButton;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n  background-color: ${({ theme }) => theme.colors.tan};\r\n  border-radius: 7px;\r\n  border: 3px solid ${({ theme }) => theme.colors.black};\r\n  box-shadow: 2px 1px 2px 2px\r\n    ${({ theme }) => theme.colors.lightTransparentBlack};\r\n  text-shadow: 1px 1px 2px ${({ theme }) => theme.colors.mineShaft};\r\n  margin: 20px;\r\n\r\n  @media (max-width: ${({ theme }) =>\r\n      theme.breakpoints.maxWidth}px) and (orientation: portrait) {\r\n    margin: 10px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { StyledSection } from \"./styled\";\r\n\r\nconst Section = ({ title, body }) => (\r\n  <StyledSection>\r\n    {title}\r\n    {body}\r\n  </StyledSection>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  padding: 10px;\r\n  font-family: \"Galada\", cursive;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-size: 50px;\r\n  border: 5px solid ${({ theme }) => theme.colors.black};\r\n  color: ${({ theme }) => theme.colors.white};\r\n  border-radius: 10px;\r\n  background-color: ${({ theme }) => theme.colors.spicyMix};\r\n  box-shadow: 5px 5px 2px 2px\r\n    ${({ theme }) => theme.colors.lightTransparentBlack};\r\n  text-shadow: 4px 4px 2px ${({ theme }) => theme.colors.mineShaft};\r\n  letter-spacing: 2px;\r\n`;\r\n","import React from \"react\";\r\nimport { Title } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <Title>{title}</Title>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledMain = styled.main`\r\n  background-color: ${({ theme }) => theme.colors.dawnPink};\r\n  padding-top: 20px;\r\n  border: 4px solid ${({ theme }) => theme.colors.black};\r\n  border-radius: 10px;\r\n  box-shadow: 5px 5px 6px 6px ${({ theme }) => theme.colors.darkTrnsparentBlack};\r\n  margin: 15px;\r\n`;\r\n","import React from \"react\";\r\nimport { StyledMain } from \"./styled\";\r\n\r\nconst Main = ({ children }) => <StyledMain>{children}</StyledMain>;\r\nexport default Main;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrap = styled.div`\r\n  font-family: \"Lato\", sans-serif;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n`;\r\n","import React from \"react\";\r\nimport { Wrap } from \"./styled\";\r\n\r\nconst Wrapper = ({ children }) => <Wrap>{children}</Wrap>;\r\nexport default Wrapper;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SubheaderTitle = styled.h2`\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n  text-shadow: 2px 2px 2px ${({ theme }) => theme.colors.gallery};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.black};\r\n  padding: 20px;\r\n  margin: 0 20px;\r\n`;\r\n","import React from \"react\";\r\nimport { SubheaderTitle } from \"./styled\";\r\n\r\nconst Subeader = ({ title }) => <SubheaderTitle>{title}</SubheaderTitle>;\r\n\r\nexport default Subeader;\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport TasksButton from \"./TasksButton\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Main from \"../../common/Main\";\r\nimport Wrapper from \"../../common/Wrapper\";\r\nimport Subheader from \"../../common/Subheader\";\r\n\r\nfunction Tasks() {\r\n  return (\r\n    <Wrapper>\r\n      <Header title=\"To do list\" />\r\n      <Main>\r\n        <TasksButton />\r\n        <Form />\r\n        <Buttons />\r\n        <Section title={<Subheader title=\"task list\" />} body={<TasksList />} />\r\n      </Main>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n    box-sizing: border-box;\r\n}\r\n\r\n*, ::after, ::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-image: url(https://cdn.pixabay.com/photo/2016/03/15/02/42/floor-1256804_960_720.jpg);\r\n  background-position: center;\r\n  background-size: cover;\r\n  background-attachment: fixed;\r\n}\r\n`;\r\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n","import { takeLatest, delay, call, put } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, setTasks, loadingExampleTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\n\r\nexport function* fetchExampleTasksHandler() {\r\n  try {\r\n    yield put(loadingExampleTasks(true));\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(setTasks(exampleTasks));\r\n    yield put(loadingExampleTasks(false));\r\n  } catch (error) {\r\n    yield call(console.error, error);\r\n    yield call(alert, \"Oops, something's wrong, sorry \");\r\n    yield put(loadingExampleTasks(false));\r\n  }\r\n}\r\n\r\nexport function* showFetchExampleTasks() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport { showFetchExampleTasks } from \"./features/tasks/tasksSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\nsagaMiddleware.run(showFetchExampleTasks);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { theme } from \"./theme\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const theme = {\r\n  colors: {\r\n    black: \"#000000\",\r\n    darkTransparentBlack: \"#000000b3\",\r\n    lightTransparentBlack: \"#00000066\",\r\n    darkGrey: \"#333333\",\r\n    white: \"#ffffff\",\r\n    mineShaft: \"#222222\",\r\n    twine: \"#c39f6f\",\r\n    gallery: \"#eeeeee\",\r\n    tan: \"#c7a67a\",\r\n    darkEbony: \"#341f04\",\r\n    spicyMix: \"#8b6e46\",\r\n    dawnPink: \"#f0e9e0\",\r\n    chartreuse: \"#7fff00\",\r\n    crimson: \"#dc143c\",\r\n  },\r\n\r\n  breakpoints: {\r\n    maxWidth: 414,\r\n  },\r\n};\r\n"],"sourceRoot":""}