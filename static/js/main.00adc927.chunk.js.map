{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Main/index.js","Wrapper/index.js","Subheader/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","name","type","required","Tasks","tasks","hideDoneTasks","map","task","key","id","done","content","Buttons","length","disabled","every","Section","title","body","Header","Main","children","Wrapper","Subeader","App","Subheader","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2WAUeA,G,UAPF,kBACX,0BAAMC,UAAU,QACd,+BAAO,2BAAOA,UAAU,cAAcC,KAAK,OAAOC,KAAK,OAAOC,UAAQ,KACtE,4BAAQH,UAAU,gBAAlB,eCYWI,G,MAfD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAMC,EAAT,EAASA,cAAT,OACV,wBAAIN,UAAY,qBACbK,EAAME,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKE,GAAIV,UAAS,4BAAuBQ,EAAKG,MAAQL,EAAgB,4BAA8B,KAC3G,4BAAQN,UAAU,+CACfQ,EAAKG,KAAO,uBAAGX,UAAU,iBAAsB,IAElD,uBAAGA,UAAS,0BAAwBQ,EAAKG,KAAK,wBAA0B,KAAQH,EAAKI,SACrF,4BAAQZ,UAAW,kDACjB,uBAAGA,UAAU,yBCEVa,G,MAXC,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAV,OACd,6BAASN,UAAS,0CAAqCK,EAAMS,OAAS,GAAG,4BACvE,4BAAQd,UAAU,kBAAkBe,SAAYV,EAAMW,OAAM,qBAAEL,SAC3DL,EAAgB,OAAS,OAD5B,oBAGA,4BAAQN,UAAU,kBAAkBe,SAAUV,EAAMW,OAAM,qBAAEL,SAA5D,kCCEWM,G,MAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACd,6BAASnB,UAAU,WAChBkB,EACAC,KCGUC,G,MANA,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAH,OACb,4BAAQlB,UAAU,UAClB,wBAAIA,UAAU,iBAAiBkB,MCGlBG,G,MALF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACX,0BAAMtB,UAAU,QACbsB,KCGUC,G,MALC,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAH,OACd,yBAAKtB,UAAU,WACZsB,KCIUE,G,MANE,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAH,OACf,wBAAIlB,UAAU,mBACXkB,KCKCb,EAAQ,CACZ,CAACK,GAAI,EAAGE,QAAS,4BAA6BD,MAAM,GACpD,CAACD,GAAI,EAAGE,QAAS,aAAcD,MAAK,IAkBvBc,MAbf,WACE,OACA,kBAAC,EAAD,KACK,kBAAC,EAAD,CAAQP,MAAM,eACjB,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASb,MAAOA,EAAOC,eART,IASd,kBAAC,EAAD,CAASY,MAAO,kBAACQ,EAAD,CAAWR,MAAM,cAAgBC,KAAM,kBAAC,EAAD,CAAOd,MAAOA,EAAOC,eAT9D,SCHAqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00adc927.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Form = () => (\n  <form className=\"form\">\n    <label><input className=\"form__input\" name=\"task\" type=\"text\" required/></label>\n    <button className=\"form__button\">add task</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Tasks = ({ tasks,hideDoneTasks }) => (\n    <ul className = \"section__taskList\" > \n      {tasks.map((task) => ( \n        <li key={task.id} className={`section__taskItem ${task.done && hideDoneTasks ? \"section__taskItem--hidden\" : \"\"}`}> \n          <button className=\"taskItem__button taskItem__button--doneTask\">\n            {task.done ? <i className=\"fas fa-check\"></i> : ''}\n          </button>\n          <p className = {`list__paragraph ${ task.done?\"list__paragraph--done\" : \"\" }`}>{task.content}</p> \n          <button className= \" taskItem__button taskItem__button--removeTask\">\n            <i className=\"fas fa-trash\"></i>\n          </button>\n        </li>))}\n    </ul>\n  );\n\nexport default Tasks;","import React from \"react\";\nimport \"./style.css\";\n\nconst Buttons = ({ tasks, hideDoneTasks }) => (\n  <section className={`\"section section__toggleButtons ${tasks.length ? \"\":\"section__button--hidden\"}`}>\n    <button className=\"section__button\" disabled = {tasks.every(({done}) => !done)}>\n      {hideDoneTasks ? \"Show\" : \"Hide\"} completed tasks\n    </button>\n    <button className=\"section__button\" disabled={tasks.every(({done}) => done)}>\n        Mark all tasks as completed\n    </button>\n  </section>\n);\n\nexport default Buttons;","import React from \"react\";\nimport \"./style.css\";\n\nconst Section = ({ title, body }) => (\n  <section className=\"section\">\n    {title}\n    {body}\n  </section>\n);\n\nexport default Section;","import React from \"react\";\nimport \"./style.css\";\n\nconst Header = ({ title }) => (\n  <header className=\"header\">\n  <h1 className=\"header__title\">{title}</h1>\n</header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nconst Main = ({ children }) => (\n  <main className=\"main\">\n    {children}\n  </main>\n);\nexport default Main;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = ({ children }) => (\n  <div className=\"wrapper\">\n    {children}\n  </div>\n);\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Subeader = ({ title }) => (\n  <h2 className=\"section__header\">\n    {title}\n  </h2>\n);\n\nexport default Subeader;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Wrapper from \"./Wrapper\";\nimport Subheader from \"./Subheader\";\n\nconst tasks = [\n  {id: 1, content: \"Find a job as a developer\", done: false},\n  {id: 2, content: \"Eat dinner\", done:true},\n];\n\nlet hideDoneTasks = false;\n\nfunction App() {\n  return (\n  <Wrapper>\n       <Header title=\"To do list\"/> \n    <Main>\n      <Form />\n      <Buttons tasks={tasks} hideDoneTasks={hideDoneTasks} />\n      <Section title={<Subheader title=\"task list\" />} body={<Tasks tasks={tasks} hideDoneTasks={hideDoneTasks} />} />\n    </Main>\n  </Wrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}