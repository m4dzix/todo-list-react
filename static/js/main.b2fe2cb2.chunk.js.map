{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Main/index.js","Wrapper/index.js","Subheader/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","contentTrimmed","trim","value","name","type","onChange","target","required","Tasks","tasks","hideDoneTasks","removeTask","toggleDoneTask","map","task","key","id","done","onClick","content","Buttons","toggleHideDoneTasks","allTasksDone","length","disabled","every","Section","title","body","Header","Main","children","Wrapper","Subeader","App","setHideDoneTasks","tasksSavedInlocalStorage","localStorage","getItem","JSON","parse","setTasks","useEffect","setItem","stringify","Subheader","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6YAyBeA,G,MAtBF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACeC,mBAAS,IADxB,mBACtBC,EADsB,KACNC,EADM,KAe/B,OACA,0BAAMC,UAAU,OAAOC,SAbA,SAACC,GACtBA,EAAMC,iBAEN,IAAMC,EAAiBN,EAAeO,OACd,KAAnBD,IAGLR,EAAYQ,GACZL,EAAkB,OAMpB,+BAAO,2BAAOC,UAAU,cAAcM,MAAOR,EAAgBS,KAAK,OAAOC,KAAK,OAAOC,SAAU,SAACP,GAAD,OAAWH,EAAkBG,EAAMQ,OAAOJ,QAAQK,UAAQ,KACzJ,4BAAQX,UAAU,gBAAlB,eCHeY,G,MAfD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAMC,EAAT,EAASA,cAAcC,EAAvB,EAAuBA,WAAWC,EAAlC,EAAkCA,eAAlC,OACV,wBAAIhB,UAAY,qBACba,EAAMI,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKE,GAAIpB,UAAS,4BAAuBkB,EAAKG,MAAQP,EAAgB,4BAA8B,KAC3G,4BAAQQ,QAAW,WAAKN,EAAeE,EAAKE,KAAMpB,UAAU,+CACzDkB,EAAKG,KAAO,uBAAGrB,UAAU,iBAAsB,IAElD,uBAAGA,UAAS,0BAAwBkB,EAAKG,KAAK,wBAA0B,KAAQH,EAAKK,SACrF,4BAAQD,QAAS,WAAKP,EAAWG,EAAKE,KAAOpB,UAAW,kDACtD,uBAAGA,UAAU,yBCEVwB,G,MAXC,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAOC,EAAV,EAAUA,cAAeW,EAAzB,EAAyBA,oBAAqBC,EAA9C,EAA8CA,aAA9C,OACd,6BAAS1B,UAAS,0CAAqCa,EAAMc,OAAS,GAAG,4BACvE,4BAAQL,QAAUG,EAAqBzB,UAAU,kBAAkB4B,SAAYf,EAAMgB,OAAM,qBAAER,SAC1FP,EAAgB,OAAS,OAD5B,oBAGA,4BAASQ,QAASI,EAAe1B,UAAU,kBAAkB4B,SAAUf,EAAMgB,OAAM,qBAAER,SAArF,kCCEWS,G,MAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACd,6BAAShC,UAAU,WAChB+B,EACAC,KCGUC,G,MANA,SAAC,GAAD,IAAGF,EAAH,EAAGA,MAAH,OACb,4BAAQ/B,UAAU,UAClB,wBAAIA,UAAU,iBAAiB+B,MCGlBG,G,MALF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACX,0BAAMnC,UAAU,QACbmC,KCGUC,G,MALC,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAH,OACd,yBAAKnC,UAAU,WACZmC,KCIUE,G,MANE,SAAC,GAAD,IAAGN,EAAH,EAAGA,MAAH,OACf,wBAAI/B,UAAU,mBACX+B,KCkEUO,MA5Df,WAAgB,IAAD,EAE2BzC,oBAAS,GAFpC,mBAENiB,EAFM,KAESyB,EAFT,KAGPC,EAA2BC,aAAaC,QAAQ,SAHzC,EAKa7C,mBACxB2C,EAA2BG,KAAKC,MAAMJ,GAA4B,IANvD,mBAKN3B,EALM,KAKCgC,EALD,KAgDb,OAtCAC,qBAAU,WACRL,aAAaM,QAAS,QAASJ,KAAKK,UAAUnC,MAC9C,CAACA,IAqCH,kBAAC,EAAD,KACK,kBAAC,EAAD,CAAQkB,MAAM,eACjB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMlB,MAAOA,EAAOjB,WAjBP,SAACE,EAAgBe,GAClCgC,GAAS,SAAAhC,GAAK,4BAAQA,GAAR,CACd,CAACU,QAASzB,EACRuB,MAAM,EACND,GAAIP,EAAMc,OAAQd,EAAMA,EAAMc,OAAO,GAAGP,GAAK,EAAI,WAc/C,kBAAC,EAAD,CAASP,MAAOA,EAAOC,cAAeA,EAAcW,oBAtC7B,WACzBc,GAAiB,SAAAzB,GAAa,OAAKA,MAqC6DY,aAxB/E,WACnBmB,GACE,SAAAhC,GAAK,OAAIA,EAAMI,KAAI,SAACC,GAAD,mBAAC,eAAYA,GAAb,IAAmBG,MAAK,aAuBzC,kBAAC,EAAD,CAASU,MAAO,kBAACkB,EAAD,CAAWlB,MAAM,cAAgBC,KAAM,kBAAC,EAAD,CAAOjB,WApC/C,SAACK,GAAQyB,GAAS,SAAAhC,GAAK,OACvCA,EAAMqC,QAAO,SAAAhC,GAAI,OAAIA,EAAKE,KAAOA,SAmCsDJ,eAjCnE,SAACI,GACtByB,GAAS,SAAAhC,GAAK,OAAIA,EAAMI,KAAI,SAAAC,GAC5B,OAAIA,EAAKE,KAAOA,EACd,2BAAUF,GAAV,IAAgBG,MAAOH,EAAKG,OAEvBH,SA4BiHL,MAAOA,EAAOC,cAAeA,SCrDrIqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2fe2cb2.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({addNewTask}) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n  event.preventDefault();\r\n\r\n  const contentTrimmed = newTaskContent.trim()\r\n  if ( contentTrimmed === \"\"){\r\n    return;\r\n  }\r\n  addNewTask( contentTrimmed);\r\n  setNewTaskContent(\"\");\r\n\r\n};\r\n\r\nreturn(\r\n<form className=\"form\" onSubmit={onFormSubmit}>\r\n<label><input className=\"form__input\" value={newTaskContent} name=\"task\" type=\"text\" onChange={(event) => setNewTaskContent(event.target.value)} required/></label>\r\n<button className=\"form__button\">add task</button>\r\n</form>\r\n);\r\n};\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks,hideDoneTasks,removeTask,toggleDoneTask }) => (\r\n    <ul className = \"section__taskList\" > \r\n      {tasks.map((task) => ( \r\n        <li key={task.id} className={`section__taskItem ${task.done && hideDoneTasks ? \"section__taskItem--hidden\" : \"\"}`}> \r\n          <button onClick = {()=>{toggleDoneTask(task.id)}} className=\"taskItem__button taskItem__button--doneTask\">\r\n            {task.done ? <i className=\"fas fa-check\"></i> : ''}\r\n          </button>\r\n          <p className = {`list__paragraph ${ task.done?\"list__paragraph--done\" : \"\" }`}>{task.content}</p> \r\n          <button onClick={()=>{removeTask(task.id)} } className= \" taskItem__button taskItem__button--removeTask\">\r\n            <i className=\"fas fa-trash\"></i>\r\n          </button>\r\n        </li>))}\r\n    </ul>\r\n  );\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDoneTasks, toggleHideDoneTasks, allTasksDone}) => (\r\n  <section className={`\"section section__toggleButtons ${tasks.length ? \"\":\"section__button--hidden\"}`}>\r\n    <button onClick ={toggleHideDoneTasks} className=\"section__button\" disabled = {tasks.every(({done}) => !done)}>\r\n      {hideDoneTasks ? \"Show\" : \"Hide\"} completed tasks\r\n    </button>\r\n    <button  onClick={allTasksDone}  className=\"section__button\" disabled={tasks.every(({done}) => done)}>\r\n        Mark all tasks as completed\r\n    </button>\r\n  </section>\r\n);\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body }) => (\r\n  <section className=\"section\">\r\n    {title}\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header className=\"header\">\r\n  <h1 className=\"header__title\">{title}</h1>\r\n</header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Main = ({ children }) => (\r\n  <main className=\"main\">\r\n    {children}\r\n  </main>\r\n);\r\nexport default Main;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Wrapper = ({ children }) => (\r\n  <div className=\"wrapper\">\r\n    {children}\r\n  </div>\r\n);\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Subeader = ({ title }) => (\r\n  <h2 className=\"section__header\">\r\n    {title}\r\n  </h2>\r\n);\r\n\r\nexport default Subeader;","import React, {useState, useEffect} from 'react';\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Header from \"./Header\";\r\nimport Main from \"./Main\";\r\nimport Wrapper from \"./Wrapper\";\r\nimport Subheader from \"./Subheader\";\r\n\r\n\r\nfunction App() {\r\n  \r\n  const [hideDoneTasks, setHideDoneTasks]=useState(false);\r\n  const tasksSavedInlocalStorage = localStorage.getItem(\"tasks\")\r\n\r\n  const [tasks, setTasks] = useState(\r\n    tasksSavedInlocalStorage ? JSON.parse(tasksSavedInlocalStorage) : []\r\n  );\r\n\r\n\r\n  useEffect(()=>{ \r\n    localStorage.setItem (\"tasks\", JSON.stringify(tasks))\r\n  },[tasks]);\r\n\r\n\r\n  const toggleHideDoneTask = () => {\r\n    setHideDoneTasks(hideDoneTasks => !hideDoneTasks);\r\n  };\r\n  const removeTask = (id) => {setTasks(tasks =>\r\n     tasks.filter(task => task.id !== id));\r\n  };\r\n  const toggleDoneTask = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n    if (task.id === id){\r\n      return{...task, done: !task.done}\r\n    }\r\n    return task;\r\n  }));\r\n}\r\nconst allTasksDone = () => {\r\n  setTasks(\r\n    tasks => tasks.map((task)=>({...task, done:true}))\r\n  );\r\n};\r\n\r\nconst addNewTask = (newTaskContent, tasks)=>{\r\n  setTasks(tasks => [...tasks,\r\n  {content: newTaskContent,\r\n    done: false,\r\n    id: tasks.length? tasks[tasks.length-1].id + 1 : 1\r\n  },\r\n])\r\n\r\n};\r\n\r\n\r\n\r\n\r\n  return (\r\n  <Wrapper>\r\n       <Header title=\"To do list\"/> \r\n    <Main>\r\n      <Form tasks={tasks} addNewTask={addNewTask} />\r\n      <Buttons tasks={tasks} hideDoneTasks={hideDoneTasks}toggleHideDoneTasks={toggleHideDoneTask}  allTasksDone={allTasksDone}  />\r\n      <Section title={<Subheader title=\"task list\" />} body={<Tasks removeTask={removeTask} toggleDoneTask={toggleDoneTask} tasks={tasks} hideDoneTasks={hideDoneTasks} />} />\r\n    </Main>\r\n  </Wrapper>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}